import{_ as e,c as r,o as a,a as t}from"./app.bd02baaa.js";const o='{"title":"VCCWでサブドメインのマルチサイトを作る方法","description":"","frontmatter":{"title":"VCCWでサブドメインのマルチサイトを作る方法","date":"2017-03-15T00:00:00.000Z","author":"Kuriya Ushiki","gravatar":"f9b54adf132891f72902df888d263f47","category":"infrastructure","tags":["vccw","wordmove","wordpress"]},"headers":[{"level":2,"title":"wordpressをマルチサイト化するに至った経緯","slug":"wordpressをマルチサイト化するに至った経緯"},{"level":2,"title":"wordpressをマルチサイト化するメリット","slug":"wordpressをマルチサイト化するメリット"},{"level":2,"title":"VCCWでサブドメインのマルチサイトを作る方法","slug":"vccwでサブドメインのマルチサイトを作る方法"},{"level":3,"title":"ローカルに構築","slug":"ローカルに構築"},{"level":3,"title":"リモート（レンタルサーバーなど）に反映させる。","slug":"リモート（レンタルサーバーなど）に反映させる。"},{"level":3,"title":"まとめ","slug":"まとめ"},{"level":3,"title":"参考サイト","slug":"参考サイト"}],"relativePath":"posts/201703115.md","lastUpdated":1645005940532}',p={},s=[t('<p>以前、いくつかのwordpressサイト1つ1つにサブドメインを作ってdocumentrootを割り当ててwordpressを入れてみたいなことをしていました。</p><hr><h2 id="wordpressをマルチサイト化するに至った経緯" tabindex="-1">wordpressをマルチサイト化するに至った経緯 <a class="header-anchor" href="#wordpressをマルチサイト化するに至った経緯" aria-hidden="true">#</a></h2><p>以前、いくつかのwordpressサイト1つ1つにサブドメインを作ってdocumentrootを割り当ててwordpressを入れてみたいなことをしていました。 そして、ブログ熱に冷めて、1年程サイトを放置していました。 そして久々サイトを更新しようと思いアクセスしたところ、別のサイトが表示されてしまっていました。 どうやら、ドメインのお金を払うのを忘れていて、そのドメインをどっかの業者に買い取られていました。 その業者がドメインを売りに出して居ましたが、胡散臭いので買い戻すことはせず新しくドメインを作り直しました。 SEO的にも強くなっていたドメインだったのでもったいなかったですが…</p><p>ドメインを取得し直して借りていたレンタルサーバーに当てなおそうと思ったら、レンタルサーバーもお金を払うのを忘れていて閉じられて居ました。 今まで頑張って作ったサイトとかブログ記事がなくなってしまいました。 ただ、かろうじて作り途中みたいなwordpressのテーマと古めのDBのバックアップが残って居ました。 DBに入っていた記事を見ると、懐かしくなってきて復活させてあげたく思いました。 そこで新しくwordpressを設置してそこに入っていいた記事だけでも復活させようと思いました。 しかしそこには複数のブログがありました。 なので管理が大変なので1つのwordpressで運用したいと思いました。 そこで調べていたところwordpressにマルチサイトという機能があることを知り、使ってみることにしました。</p><p>長くなりましたが、悔しかったので経緯を書かせていただきました。</p><h2 id="wordpressをマルチサイト化するメリット" tabindex="-1">wordpressをマルチサイト化するメリット <a class="header-anchor" href="#wordpressをマルチサイト化するメリット" aria-hidden="true">#</a></h2><ul><li>一つのwordpressアカウントで複数のサイトの管理画面に入れる。</li><li>wordpressのサイト1つ1つにプラグインを入れる必要がない。</li><li>ソースコードがすごい減る。</li><li>1つのDB、または1つの接頭辞で良くなる。</li></ul><p>デメリットは今のところ、学習コストが少しかかる程度です。</p><h2 id="vccwでサブドメインのマルチサイトを作る方法" tabindex="-1">VCCWでサブドメインのマルチサイトを作る方法 <a class="header-anchor" href="#vccwでサブドメインのマルチサイトを作る方法" aria-hidden="true">#</a></h2><p>今回は、<a href="http://vccw.cc/" target="_blank" rel="noopener noreferrer">VCCW</a>を使ってサブドメインを使ったwordperssマルチサイト化の方法を説明します。</p><p>VCCWを使わないWordPressのマルチサイト化は以下のサイトを見れば分かります。</p><ul><li><a href="https://www.templateking.jp/practical/build/sub_dir.html" target="_blank" rel="noopener noreferrer">複数サイト運用方法(サブディレクトリ型)</a></li><li><a href="https://www.templateking.jp/practical/build/multi_dom.html" target="_blank" rel="noopener noreferrer">複数サイト運用方法(複数ドメイン型)</a></li><li><a href="https://www.templateking.jp/practical/build/sub_dom.html" target="_blank" rel="noopener noreferrer">複数サイト運用方法(サブドメイン型)</a>←今回はコレ</li></ul><h3 id="ローカルに構築" tabindex="-1">ローカルに構築 <a class="header-anchor" href="#ローカルに構築" aria-hidden="true">#</a></h3><p><a href="http://vccw.cc/" target="_blank" rel="noopener noreferrer">VCCW</a>の使い方は分かっているものとして話を進めます。</p><p>まずVCCWのplaybook(今回はsite.yml)の<code>multisite:</code>の箇所を<code>true</code>にします。</p><div class="language-"><pre><code>multisite: true\n</code></pre></div><p>それ以外のsite.ymlとvagrantfileの完了していると仮定します。</p><p><code>vagrant up</code>で立ち上げます。</p><p>設定しているurlにアクセスして、管理画面にログインすると、サイトネットワーク管理の管理画面が表示されているかと思います。 そしたら「設定」の「ネットワークの設定」をクリックします。</p><p>/var/www/html/ にある wp-config.php ファイルと /var/www/html/ にある .htaccessのファイルを編集します。</p><p>「ネットワークの設定」に記載されている内容を各、コピーするだけで良いのですが、 VCCWで&#39;multisite: true&#39;にしていればwp-config.phpの記述はすでにあると思います。 もしない記載があれば追加してあげればいいと思います。 ちなみに <code>define( &#39;SUBDOMAIN_INSTALL&#39;, true );</code>をtrueにするとサブドメイン型になってfalseにするとサブディレクトリ型になります。 ただVCCWではサブドメイン型非推奨っぽいです。</p><p>.htaccessはまるっと上書きして問題無いと思います。</p><p>hostsにサブドメインを追加します。 macの場合</p><div class="language-"><pre><code>sudo vi /private/etc/hosts\n</code></pre></div><p>立ち上げているvagrantで振り当てたIPと同じIPを使ってサブドメインも設定します。 例</p><div class="language-"><pre><code> 192.168.33.11 one.sitename.dev two.sitename.dev three.sitename.dev\n</code></pre></div><p>追加するサブドメインを追加する。</p><p>そしたらサイトネットワーク管理の管理画面に戻り、「サイト」の「新規追加」をクリックします。 以下項目に入力していきます。</p><ul><li>サイトアドレス (URL) hostsで設定したサブドメインをこちらにも設定する。</li><li>サイトのタイトル</li><li>サイトの言語</li><li>管理者メールアドレス</li></ul><p>以上でローカルでの設定は完了です。</p><h3 id="リモート（レンタルサーバーなど）に反映させる。" tabindex="-1">リモート（レンタルサーバーなど）に反映させる。 <a class="header-anchor" href="#リモート（レンタルサーバーなど）に反映させる。" aria-hidden="true">#</a></h3><p>Movefileの設定をします。 詳細は以下のページをご参照ください。 <a href="http://protagram.test/backend/vccw%e3%81%a7wordmove%e3%81%ae%e6%a6%82%e8%a6%81%e3%81%a8%e8%a8%ad%e5%ae%9a%e6%96%b9%e6%b3%95%e3%81%a8%e4%bd%bf%e3%81%84%e6%96%b9" target="_blank" rel="noopener noreferrer">VCCWでのWordMoveの概要と設定方法と使い方</a></p><p><code>wordmove push --all</code>を実行した後、サイトにアクセスしてログインすると以下の画面が表示されます。 <img src="http://protagram.test/wp-content/uploads/2017/04/wp-bdsetting-display-300x184.png" alt="" width="300" height="184" class="alignnone size-medium wp-image-128"> こちらにはMovefileで設定したDBの情報と同じものを入力してください。</p><p>うまく表示されない場合は<code>wordmove push --all</code>を何度か行ってください。</p><p>管理画面にログインすると普通の管理画面が表示されます。 しかしサイトネットワーク管理の管理画面（<a href="http://sitename.com/wp-admin/network/%EF%BC%89%E3%81%AB%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E3%81%97%E3%82%88%E3%81%86%E3%81%A8%E3%81%97%E3%81%A6%E3%82%82%E3%80%8C%E3%83%9E%E3%83%AB%E3%83%81%E3%82%B5%E3%82%A4%E3%83%88%E3%81%AE%E3%82%B5%E3%83%9D%E3%83%BC%E3%83%88%E3%81%8C%E6%9C%89%E5%8A%B9%E3%81%A7%E3%81%AF%E3%81%82%E3%82%8A%E3%81%BE%E3%81%9B%E3%82%93%E3%80%82" target="_blank" rel="noopener noreferrer">http://sitename.com/wp-admin/network/）にアクセスしようとしても「マルチサイトのサポートが有効ではありません。</a> 」というエラーが出ます。</p><p>wordmove push --allではwp-config.phpは反映されないからです。 そこでローカルでwp-config.phpを修正した時と同じになります。 ただし以下の行は本番のURLに変更しましょう。 <code>define( &#39;DOMAIN_CURRENT_SITE&#39;, &#39;sitename.dev&#39; );</code> ↓ <code>define( &#39;DOMAIN_CURRENT_SITE&#39;, &#39;sitename.com&#39; );</code></p><p>更にDB\bにあるURLをリプレイスする必要があります。 <a href="http://sitename.xn--devsitename-z66f.info" target="_blank" rel="noopener noreferrer">sitename.dev→sitename.info</a></p><p>ただSQLで一括置換するのは良くないらしいです。</p><blockquote><p>wp_options や wp_postmeta には、シリアライズされたデータが入っており、そのまま変換するとまずい</p></blockquote><p>詳細はこちら <a href="https://www.infoscoop.org/blogjp/2014/08/14/use-search-and-replace-for-wordpress-when-moving/" target="_blank" rel="noopener noreferrer">WordPress移行時にURLをSQLで直接一括置換はダメ！ 「Search and Replace for WordPress Databases Script」を使おう</a></p><p>なので<a href="https://interconnectit.com/products/search-and-replace-for-wordpress-databases/" target="_blank" rel="noopener noreferrer">Search and Replace for WordPress Databases Script</a>を使います。 こちらの使い方も「<a href="https://www.infoscoop.org/blogjp/2014/08/14/use-search-and-replace-for-wordpress-when-moving/" target="_blank" rel="noopener noreferrer">WordPress移行時にURLをSQLで直接一括置換はダメ！ 「Search and Replace for WordPress Databases Script」を使おう</a>」にかいてあります。</p><h4 id="search-and-replace-for-wordpress-databases-scriptの使い方" tabindex="-1">Search and Replace for WordPress Databases Scriptの使い方 <a class="header-anchor" href="#search-and-replace-for-wordpress-databases-scriptの使い方" aria-hidden="true">#</a></h4><ol><li>「<a href="https://interconnectit.com/products/search-and-replace-for-wordpress-databases/" target="_blank" rel="noopener noreferrer">Search and Replace for WordPress Databases Script</a>」 こちらから「DATABASE SEARCH AND REPLACE SCRIPT IN PHP」をダウンロードします。</li><li>ダウンロードしたzipファイルを開いて、ローカルのwordpressディレクトリの直下に置きます。※ディレクトリは任意の名前に変更してよい。</li><li><code>wordmove push --all</code>を実行して本番にアップします。</li><li><a href="http://sitename.info/Search-Replace-DB-master" target="_blank" rel="noopener noreferrer">sitename.info/Search-Replace-DB-master</a> にアクセス。　※ディレクトリ名を変更していたらその名前に変更。</li><li>フォームが出てくるので上の方にあるreplaceと書いてあるところに置換したいURLを、withのところに置換後のURLを入力する</li><li>「live run」をクリックする。 <img src="http://protagram.test/wp-content/uploads/2017/04/replace-url-300x95.png" alt="" width="300" height="95" class="alignnone size-medium wp-image-135"></li></ol><p>再度、サイトネットワーク管理の管理画面（<a href="http://sitename.com/wp-admin/network/%EF%BC%89%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E3%81%99%E3%82%8B%E3%81%A1%E3%82%83%E3%82%93%E3%81%A8%E8%A1%A8%E7%A4%BA%E5%87%BA%E6%9D%A5%E3%82%8B%E3%81%AF%E3%81%9A%E3%81%A7%E3%81%99%E3%80%82" target="_blank" rel="noopener noreferrer">http://sitename.com/wp-admin/network/）アクセスするちゃんと表示出来るはずです。</a></p><p>ただこのままだとセキュリティ上非常にまずいので、Search-Replace-DB-masterにはベーシック認証を設置などする、またはファイルを消すなどした方が良いと思います。</p><p>ただサイトネットワーク管理で設定した、サブドメインを当てたサイトにアクセスしても、表示されない。 これは、レンタルサーバー側からサブドメインのアクセス先も割り当てないといけない。 ロリポップの場合はこちら→<a href="http://okiraku.sub.jp/post-1667" target="_blank" rel="noopener noreferrer">WordPressでマルチサイト化＠ロリポップ！</a></p><p>これでやっとローカルと同じようにサブドメインのURLにアクセスしてもちゃんと表示されるようになる。</p><h3 id="まとめ" tabindex="-1">まとめ <a class="header-anchor" href="#まとめ" aria-hidden="true">#</a></h3><p>本来はローカルで記事とかも書いて、それを<code>wordmove push --all</code>コマンド一発で本番にアップみたいな流れにしたかったのだが、サブドメインを使ったマルチサイトでは、<code>wordmove push --all</code>をした後にDBのURLを変更しなければならない。 手順が増えるのは若干めんどくさい。 また新しくサイトを追加する際には、都度レンタルサーバーの管理画面側から追加しなければならない。</p><p>サブディレクトリ型にすればこういった手順は必要なくなるのか… 試すのめんどくさいので今回は検証するのは辞めておきます。</p><h3 id="参考サイト" tabindex="-1">参考サイト <a class="header-anchor" href="#参考サイト" aria-hidden="true">#</a></h3><p><a href="https://tech.fleeker.net/vccwmultisite/" target="_blank" rel="noopener noreferrer">【ドはまり】VCCWローカル側をマルチサイトに対応させた話</a></p>',53)];var l=e(p,[["render",function(e,t,o,p,l,n){return a(),r("div",null,s)}]]);export{o as __pageData,l as default};
